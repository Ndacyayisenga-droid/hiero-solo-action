name: "Hiero Solo Action"
description: "Run a Hiero based network by using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to Mainnet version."
    required: false
    default: "v0.58.10"
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: 'Install JSON-RPC-Relay'
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
  email:
    description: "Email for deployment configuration"
    required: true
    default: "user@example.com"
outputs:
  accountId:
    description: "Hedera account id for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}
runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode == 'true' }}"

    - name: Setup Java
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Node
      uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
      with:
        node-version: 22

    - name: Install WGet CLI
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y wget

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cleanup Previous Runs
      shell: bash
      run: |
        rm -rf ~/.solo
        kind delete cluster --name solo-e2e || true

    - name: Setup Kind
      uses: helm/kind-action@0025e74a8c7512023d06dc019c617aa3cf561fde # v1.10.0
      with:
        version: v0.21.0
        kubectl_version: v1.28.6
        cluster_name: solo-e2e
        wait: 120s

    - name: Install Solo
      shell: bash
      run: npm install -g @hashgraph/solo@0.35.2

    - name: Deploy Solo Test Network
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-e2e
        SOLO_NAMESPACE: solo
        SOLO_CLUSTER_SETUP_NAMESPACE: solo-cluster
        SOLO_DEPLOYMENT: solo-deployment
        SOLO_EMAIL: ${{ inputs.email }}
      run: |
        # Initialize solo
        solo init

        # Generate node keys
        solo node keys --gossip-keys --tls-keys -i node1,node2,node3

        # Create deployment
        solo deployment create -n $SOLO_NAMESPACE --context kind-$SOLO_CLUSTER_NAME --email $SOLO_EMAIL --deployment-clusters kind-$SOLO_CLUSTER_NAME --deployment $SOLO_DEPLOYMENT --node-aliases node1,node2,node3

        # Setup cluster
        solo cluster setup -s $SOLO_CLUSTER_SETUP_NAMESPACE --deployment $SOLO_DEPLOYMENT

        # Deploy network
        solo network deploy -i node1,node2,node3 --deployment $SOLO_DEPLOYMENT --namespace $SOLO_NAMESPACE

        # Setup nodes
        solo node setup -i node1,node2,node3 --deployment $SOLO_DEPLOYMENT --namespace $SOLO_NAMESPACE

        # Start nodes
        solo node start -i node1,node2,node3 --deployment $SOLO_DEPLOYMENT --namespace $SOLO_NAMESPACE

        # Port forward HAProxy
        kubectl port-forward svc/haproxy-node1 -n $SOLO_NAMESPACE 50211:50211 &

    - name: Deploy MirrorNode
      if: ${{ inputs.installMirrorNode == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        solo mirror-node deploy --deployment $SOLO_DEPLOYMENT --namespace $SOLO_NAMESPACE
        # Port forward mirror node REST API
        kubectl port-forward svc/solo-deployment-rest -n $SOLO_NAMESPACE ${{ inputs.mirrorNodePort }}:8080 &

    - name: Deploy JSON-RPC-Relay
      if: ${{ inputs.installRelay == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        echo "Installing JSON-RPC-Relay..."
        solo relay deploy -i node1,node2,node3 --deployment $SOLO_DEPLOYMENT --namespace $SOLO_NAMESPACE
        echo "JSON-RPC-Relay installed successfully"
        kubectl port-forward svc/relay-node1-node2-node3-hedera-json-rpc-relay -n $SOLO_NAMESPACE ${{ inputs.relayPort }}:8080 &

    - name: Create account
      id: create-account
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        JSON=$(solo account create --namespace $SOLO_NAMESPACE --deployment $SOLO_DEPLOYMENT | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py)
        export HEDERA_ACCOUNT_ID=$(echo $JSON | jq -r '.accountId')
        export HEDERA_ACCOUNT_PUBLIC_KEY=$(echo $JSON | jq -r '.publicKey')
        export HEDERA_ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$HEDERA_ACCOUNT_ID -n $SOLO_NAMESPACE -o jsonpath='{.data.privateKey}' | base64 -d | xargs)
        solo account update --account-id $HEDERA_ACCOUNT_ID --hbar-amount 10000000 --namespace $SOLO_NAMESPACE --deployment $SOLO_DEPLOYMENT
        echo "accountId=$HEDERA_ACCOUNT_ID"
        echo "publicKey=$HEDERA_ACCOUNT_PUBLIC_KEY"
        echo "privateKey=$HEDERA_ACCOUNT_PRIVATE_KEY"
        echo "accountId=$HEDERA_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$HEDERA_ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$HEDERA_ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

branding:
  icon: "share-2"
  color: "black"
