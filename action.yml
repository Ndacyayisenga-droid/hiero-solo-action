name: "Hiero Solo Action"
description: "Run a Hiero-based network using the Solo tool"

inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to Mainnet version."
    required: false
    default: "v0.58.1"
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: "Install JSON-RPC-Relay"
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"

outputs:
  accountId:
    description: "Hedera account ID for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}

runs:
  using: "composite"
  steps:
    - name: Print Inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode == 'true' }}"

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: "21"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "22"

    - name: Install Required CLI Tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget jq

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: "v3.12.3"

    - name: Setup Kind
      uses: helm/kind-action@v1.12.0
      with:
        install_only: true
        node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
        version: "v0.26.0"
        kubectl_version: "v1.31.4"
        verbosity: 3
        wait: "120s"

    - name: Install Solo
      shell: bash
      run: npm install -g @hashgraph/solo@0.35.1

    - name: Deploy Solo Test Network
      shell: bash
      run: |
        export SOLO_CLUSTER_NAME=solo-cluster
        export SOLO_NAMESPACE=solo
        export SOLO_DEPLOYMENT=solo-deployment
        export SOLO_EMAIL=solo-action@hiero.org

        kind create cluster --name "$SOLO_CLUSTER_NAME"
        solo init

        solo deployment create \
          --node-aliases node1 \
          --namespace "$SOLO_NAMESPACE" \
          --context kind-$SOLO_CLUSTER_NAME \
          --email "$SOLO_EMAIL" \
          --deployment-clusters kind-$SOLO_CLUSTER_NAME \
          --deployment "$SOLO_DEPLOYMENT"

        solo node keys --node-aliases node1 --gossip-keys --tls-keys --quiet-mode
        solo cluster setup --cluster-setup-namespace "$SOLO_CLUSTER_NAME" --quiet-mode    
        solo network deploy --node-aliases node1 --deployment "$SOLO_DEPLOYMENT"
        solo node setup --node-aliases node1 --deployment "$SOLO_DEPLOYMENT"
        solo node start --node-aliases node1 --deployment "$SOLO_DEPLOYMENT"

    - name: Debug Solo Account Creation
      shell: bash
      run: |
        echo "Running 'solo account create'..."
        solo account create | tee solo_account_output.json

    - name: Extract Account Details
      id: create-account
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        JSON=$(cat solo_account_output.json)
        echo "Raw JSON output from 'solo account create': $JSON"

        ACCOUNT_ID=$(echo "$JSON" | jq -r '.accountId')
        PUBLIC_KEY=$(echo "$JSON" | jq -r '.publicKey')
        PRIVATE_KEY=$(kubectl get secret account-key-$ACCOUNT_ID -n solo -o jsonpath='{.data.privateKey}' | base64 -d)

        solo account update --account-id "$ACCOUNT_ID" --hbar-amount 10000000

        echo "accountId=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
        echo "publicKey=$PUBLIC_KEY" >> "$GITHUB_OUTPUT"
        echo "privateKey=$PRIVATE_KEY" >> "$GITHUB_OUTPUT"

branding:
  icon: "share-2"
  color: "black"
