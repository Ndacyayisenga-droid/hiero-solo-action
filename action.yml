name: "Hiero Solo Action"
description: "Run a Hiero-based network using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to Mainnet version."
    required: false
    default: "v0.58.1"
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: "Install JSON-RPC-Relay"
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
outputs:
  accountId:
    description: "Hedera account ID for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}
runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode }}"

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Install WGet CLI
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y wget

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install jq and base64
      shell: bash
      run: sudo apt-get install -y jq coreutils

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: "v3.12.3" # Helm version

    - name: Setup Kind
      uses: helm/kind-action@v1
      with:
        install_only: true
        node_image: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72
        version: v0.20.0
        kubectl_version: v1.27.3
        verbosity: 3
        wait: 120s

    - name: Install Solo
      shell: bash
      run: npm install -g @hashgraph/solo@0.35.1

    - name: Deploy Solo Test Network
      shell: bash
      run: |
        export SOLO_CLUSTER_NAME=solo-cluster
        export SOLO_NAMESPACE=solo
        export SOLO_DEPLOYMENT=solo-deployment
        export SOLO_EMAIL=solo-action@hiero.org

        kind create cluster -n "${SOLO_CLUSTER_NAME}"
        solo init
        solo deployment create --node-aliases node1 --namespace "${SOLO_NAMESPACE}" --context kind-${SOLO_CLUSTER_NAME} --email "${SOLO_EMAIL}" --deployment-clusters kind-${SOLO_CLUSTER_NAME} --deployment "${SOLO_DEPLOYMENT}"
        solo node keys --node-aliases node1 --gossip-keys --tls-keys --quiet-mode
        solo cluster setup --cluster-setup-namespace "${SOLO_CLUSTER_NAME}" --quiet-mode
        solo network deploy --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}"
        solo node setup --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}"
        solo node start --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}"

    - name: Verify Solo network status
      shell: bash
      run: |
        kubectl get pods -n solo
        kubectl logs -n solo -l app=hedera-node

    - name: Wait for network to stabilize
      shell: bash
      run: sleep 30

    - name: Create account
      id: create-account
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        # Debug: Print the output of solo account create
        echo "Running solo account create..."
        JSON=$(solo account create)
        echo "Output of solo account create:"
        echo "$JSON"

        # Extract account details using the Python script
        JSON=$(echo "$JSON" | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py)
        echo "Parsed JSON:"
        echo "$JSON"

        # Check if the JSON contains an error
        if echo "$JSON" | jq -e '.error' > /dev/null; then
          echo "Error: Failed to parse account details"
          exit 1
        fi

        # Export account details
        export HEDERA_ACCOUNT_ID=$(echo "$JSON" | jq -r '.accountId')
        export HEDERA_ACCOUNT_PUBLIC_KEY=$(echo "$JSON" | jq -r '.publicKey')
        export HEDERA_ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$HEDERA_ACCOUNT_ID -n solo -o jsonpath='{.data.privateKey}' | base64 -d | xargs)

        # Debug: Print account details
        echo "Account ID: $HEDERA_ACCOUNT_ID"
        echo "Public Key: $HEDERA_ACCOUNT_PUBLIC_KEY"
        echo "Private Key: $HEDERA_ACCOUNT_PRIVATE_KEY"

        # Update account balance
        solo account update --account-id $HEDERA_ACCOUNT_ID --hbar-amount 10000000

        # Set outputs
        echo "accountId=$HEDERA_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$HEDERA_ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$HEDERA_ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

branding:
  icon: "share-2"
  color: "black"
