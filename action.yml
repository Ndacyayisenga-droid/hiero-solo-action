name: "Hiero Solo Action"
description: "Run a Hiero based network by using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to Mainnet version."
    required: false
    default: "v0.58.1"
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: 'Install JSON-RPC-Relay'
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
outputs:
  accountId:
    description: "Hedera account id for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}

runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode == 'true' }}"
        echo "installRelay: ${{ inputs.installRelay }}"
        echo "is installRelay: ${{ inputs.installRelay == 'true' }}"

    - name: Setup Java
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        distribution: temurin
        java-version: ${{ env.JAVA_VERSION }}
        check-latest: false

    - name: Setup Node
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
      with:
        node-version: 20
        cache: npm

    - name: Install WGet CLI
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y wget

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Helm
      uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
      with:
        version: "v3.12.3"

    - name: Setup Kind
      uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      with:
        install_only: true
        node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
        version: v0.26.0
        kubectl_version: v1.31.4
        verbosity: 3
        wait: 120s

    - name: Install Solo
      shell: bash
      env:
        SOLO_VERSION: "0.35.1" # Set default version, adjust as needed
      run: npm install -g @hashgraph/solo@${{ env.SOLO_VERSION }}

    - name: Deploy Solo Test Network
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-cluster
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
        SOLO_EMAIL: solo-action@hiero.org
      run: |
        # Create Kind cluster
        kind create cluster --name "${SOLO_CLUSTER_NAME}"

        # Initialize Solo
        solo init

        # Setup cluster
        solo cluster setup --namespace "${SOLO_NAMESPACE}" --quiet-mode

        # Create deployment
        solo deployment create --node-aliases node1 --namespace "${SOLO_NAMESPACE}" \
          --context kind-${SOLO_CLUSTER_NAME} --email "${SOLO_EMAIL}" \
          --deployment-clusters kind-${SOLO_CLUSTER_NAME} --deployment "${SOLO_DEPLOYMENT}" \
          --version ${{ inputs.hederaVersion }}

        # Generate node keys
        solo node keys --node-aliases node1 --gossip-keys --tls-keys --quiet-mode

        # Deploy network
        solo network deploy --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          ${{ inputs.installMirrorNode == 'true' && '--enable-mirror-node' || '' }} \
          ${{ inputs.installRelay == 'true' && '--enable-json-rpc-relay' || '' }} \
          --version ${{ inputs.hederaVersion }}

        # Setup and start node
        solo node setup --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}"
        solo node start --node-aliases node1 --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}"

    - name: Create account
      id: create-account
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        SOLO_NAMESPACE: solo
      run: |
        JSON=$(solo account create --namespace "${SOLO_NAMESPACE}" | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py)
        export HEDERA_ACCOUNT_ID=$(echo $JSON | jq -r '.accountId')
        export HEDERA_ACCOUNT_PUBLIC_KEY=$(echo $JSON | jq -r '.publicKey')
        export HEDERA_ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$HEDERA_ACCOUNT_ID -n "${SOLO_NAMESPACE}" -o jsonpath='{.data.privateKey}' | base64 -d | xargs)
        solo account update --account-id $HEDERA_ACCOUNT_ID --hbar-amount 10000000 --namespace "${SOLO_NAMESPACE}"
        echo "accountId=$HEDERA_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$HEDERA_ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$HEDERA_ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

branding:
  icon: "share-2"
  color: "black"
