name: "Hedera Solo Action"
description: "Run a Hedera based network by using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to latest compatible version."
    required: false
    default: "v0.59.0"  # Updated to latest compatible version
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: "Install JSON-RPC-Relay"
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
outputs:
  accountId:
    description: "Hedera account id for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}
runs:
  using: "composite"
  steps:
    - name: Print Inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode == 'true' }}"

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20.18.0"

    - name: Install Wget CLI
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y wget

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup Kind
      uses: helm/kind-action@v1.10.0
      with:
        version: v1.29.1  # Updated to match solo requirements
        kubectl_version: v1.29.1  # Updated to match solo requirements
        cluster_name: solo-cluster
        wait: 120s

    - name: Install Solo
      shell: bash
      run: npm install -g @hashgraph/solo@0.35.1

    - name: Deploy Solo Test Network
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-cluster
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        # Initialize Solo environment
        solo init

        # Create deployment with namespace and explicit context
        solo deployment create \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --context "kind-${SOLO_CLUSTER_NAME}" \
          --email "ci@example.com" \
          --quiet-mode

        # Setup cluster with shared components
        solo cluster setup \
          --cluster-ref "${SOLO_CLUSTER_NAME}" \
          --namespace "solo-setup"

        # Add a node with keys and deploy it
        solo node add \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --gossip-keys \
          --tls-keys \
          --release-tag "${{ inputs.hederaVersion }}" \
          --quiet-mode

        # Deploy the network
        solo network deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}"

        # Setup the node
        solo node setup \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --node-alias "node0"

        # Start the node
        solo node start \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --node-alias "node0"

        # Background port-forward for network access
        kubectl port-forward svc/haproxy-node0-svc -n "${SOLO_NAMESPACE}" 50211:50211 &

    - name: Deploy Mirror Node
      if: ${{ inputs.installMirrorNode == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        solo mirror-node deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --mirror-node-version "v0.126.0"
        kubectl port-forward svc/fullstack-deployment-hedera-explorer -n "${SOLO_NAMESPACE}" ${{ inputs.mirrorNodePort }}:80 &

    - name: Deploy JSON-RPC-Relay
      if: ${{ inputs.installRelay == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        echo "Installing JSON-RPC-Relay..."
        solo relay deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --relay-release "v0.66.0"
        echo "JSON-RPC-Relay installed successfully"
        kubectl port-forward svc/json-rpc-relay -n "${SOLO_NAMESPACE}" ${{ inputs.relayPort }}:7546 &

    - name: Create Account
      id: create-account
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        JSON=$(solo account create --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}" | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py)
        export HEDERA_ACCOUNT_ID=$(echo $JSON | jq -r '.accountId')
        export HEDERA_ACCOUNT_PUBLIC_KEY=$(echo $JSON | jq -r '.publicKey')
        export HEDERA_ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$HEDERA_ACCOUNT_ID -n "${SOLO_NAMESPACE}" -o jsonpath='{.data.privateKey}' | base64 -d | xargs)
        solo account update \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --account-id $HEDERA_ACCOUNT_ID \
          --hbar-amount 10000000
        echo "accountId=$HEDERA_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$HEDERA_ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$HEDERA_ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

branding:
  icon: "share-2"
  color: "black"
