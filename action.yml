name: "Hedera Solo Action"
description: "Run a Hedera based network by using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hederaVersion:
    description: "Version of Hedera to use. Defaults to latest compatible version."
    required: false
    default: "v0.59.0"
  mirrorNodePort:
    description: "Port for Mirror Node"
    required: false
    default: "8080"
  installRelay:
    description: "Install JSON-RPC-Relay"
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
outputs:
  accountId:
    description: "Hedera account id for a new account"
    value: ${{ steps.create-account.outputs.accountId }}
  publicKey:
    description: "Hedera public key for the new account"
    value: ${{ steps.create-account.outputs.publicKey }}
  privateKey:
    description: "Hedera private key for the new account"
    value: ${{ steps.create-account.outputs.privateKey }}
runs:
  using: "composite"
  steps:
    - name: Print Inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "hederaVersion: ${{ inputs.hederaVersion }}"
        echo "installRelay: ${{ inputs.installRelay }}"

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.18.0"
        cache: 'npm'

    - name: Install System Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget jq
        python3 -m pip install --upgrade pip

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup Kubernetes Cluster
      uses: helm/kind-action@v1.10.0
      with:
        version: v1.29.1
        kubectl_version: v1.29.1
        cluster_name: solo-cluster
        wait: 180s
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 50211
              hostPort: 50211
            - containerPort: 8080
              hostPort: 8080
            - containerPort: 7546
              hostPort: 7546

    - name: Install Solo CLI
      shell: bash
      run: |
        npm install -g @hashgraph/solo@0.35.1
        solo --version

    - name: Initialize Solo Environment
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-cluster
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        solo init --quiet-mode
        solo deployment create \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --context "kind-${SOLO_CLUSTER_NAME}" \
          --email "ci@example.com" \
          --quiet-mode

    - name: Setup Cluster Components
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-cluster
        SOLO_NAMESPACE: solo-e2e
      run: |
        solo cluster setup \
          --cluster-ref "${SOLO_CLUSTER_NAME}" \
          --namespace "solo-setup" \
          --quiet-mode

    - name: Deploy Network Node
      shell: bash
      env:
        SOLO_DEPLOYMENT: solo-deployment
        SOLO_NAMESPACE: solo-e2e
      run: |
        solo node add \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --gossip-keys \
          --tls-keys \
          --release-tag "${{ inputs.hederaVersion }}" \
          --quiet-mode

        solo network deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --quiet-mode

        solo node setup \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --node-alias "node0" \
          --quiet-mode

        solo node start \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --node-alias "node0" \
          --quiet-mode

        # Verify node is running
        kubectl wait --for=condition=ready pod -n "${SOLO_NAMESPACE}" -l "solo.hedera.com/node=node0" --timeout=180s
        kubectl port-forward svc/haproxy-node0-svc -n "${SOLO_NAMESPACE}" 50211:50211 &

    - name: Deploy Mirror Node
      if: ${{ inputs.installMirrorNode == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        solo mirror-node deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --mirror-node-version "v0.126.0" \
          --quiet-mode
        
        kubectl wait --for=condition=ready pod -n "${SOLO_NAMESPACE}" -l "app.kubernetes.io/name=mirror-node" --timeout=180s
        kubectl port-forward svc/fullstack-deployment-hedera-explorer -n "${SOLO_NAMESPACE}" ${{ inputs.mirrorNodePort }}:80 &

    - name: Deploy JSON-RPC-Relay
      if: ${{ inputs.installRelay == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        solo relay deploy \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --relay-release "v0.66.0" \
          --quiet-mode
        
        kubectl wait --for=condition=ready pod -n "${SOLO_NAMESPACE}" -l "app.kubernetes.io/name=json-rpc-relay" --timeout=180s
        kubectl port-forward svc/json-rpc-relay -n "${SOLO_NAMESPACE}" ${{ inputs.relayPort }}:7546 &

    - name: Create Test Account
      id: create-account
      shell: bash
      env:
        SOLO_NAMESPACE: solo-e2e
        SOLO_DEPLOYMENT: solo-deployment
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        # Create account and parse output
        ACCOUNT_JSON=$(solo account create --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}" --quiet-mode | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py)
        
        # Extract account details
        ACCOUNT_ID=$(echo "$ACCOUNT_JSON" | jq -r '.accountId')
        PUBLIC_KEY=$(echo "$ACCOUNT_JSON" | jq -r '.publicKey')
        PRIVATE_KEY=$(kubectl get secret "account-key-$ACCOUNT_ID" -n "${SOLO_NAMESPACE}" -o jsonpath='{.data.privateKey}' | base64 -d)
        
        # Fund the account
        solo account update \
          --deployment "${SOLO_DEPLOYMENT}" \
          --namespace "${SOLO_NAMESPACE}" \
          --account-id "$ACCOUNT_ID" \
          --hbar-amount 10000000 \
          --quiet-mode
        
        # Set outputs
        echo "accountId=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$PRIVATE_KEY" >> $GITHUB_OUTPUT

branding:
  icon: "share-2"
  color: "black"
