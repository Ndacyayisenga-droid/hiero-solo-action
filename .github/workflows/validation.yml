name: PR Validation

on:
  pull_request:
    branches:
      - main

jobs:
  validate-hedera-outputs:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Hedera Solo
        uses: ./
        id: solo

      - name: ‚úÖ Validate Hedera Solo Outputs
        run: |
          echo "Debug: Checking outputs..."
          echo "accountId: ${{ steps.solo.outputs.accountId }}"
          echo "privateKey: ${{ steps.solo.outputs.privateKey }}"
          echo "publicKey: ${{ steps.solo.outputs.publicKey }}"

          # Small delay to ensure outputs are set
          sleep 5

          if [ -z "${{ steps.solo.outputs.accountId }}" ]; then
            echo "‚ùå Error: accountId is missing!"
            exit 1
          fi
          if [ -z "${{ steps.solo.outputs.privateKey }}" ]; then
            echo "‚ùå Error: privateKey is missing!"
            exit 1
          fi
          if [ -z "${{ steps.solo.outputs.publicKey }}" ]; then
            echo "‚ùå Error: publicKey is missing!"
            exit 1
          fi
          echo "üéâ All outputs are valid!"

  validate-mirror-node:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Hedera Solo with MirrorNode
        uses: ./
        with:
          installMirrorNode: true
        id: solo

      - name: üì¶ Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: ‚úÖ Validate Mirror Node API
        run: |
          echo "Account ID: ${{ steps.solo.outputs.accountId }}"
          echo "Private Key: ${{ steps.solo.outputs.privateKey }}"
          echo "Public Key: ${{ steps.solo.outputs.publicKey }}"

          # Wait longer for Mirror Node to stabilize
          echo "Waiting for Mirror Node to be ready..."
          sleep 30

          # Retry loop for API availability
          for i in {1..5}; do
            RESPONSE=$(curl -s -w "%{http_code}" -X 'GET' 'http://localhost:8080/api/v1/network/nodes' -H 'accept: application/json' -o response.json)
            if [ "$RESPONSE" -eq 200 ]; then
              echo "‚úÖ API request successful"
              cat response.json
              exit 0
            fi
            echo "‚ö†Ô∏è Attempt $i: API not ready yet (status: $RESPONSE), retrying in 5 seconds..."
            sleep 5
          done

          echo "‚ùå Error: API request failed after retries with status code $RESPONSE"
          cat response.json
          exit 1
