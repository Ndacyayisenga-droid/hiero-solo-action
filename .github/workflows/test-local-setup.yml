name: Local Setup Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - 'local/**'
      - '.github/workflows/local-setup-validation.yml'
  push:
    branches:
      - main
    paths:
      - 'local/**'
      - '.github/workflows/local-setup-validation.yml'

jobs:
  validate-docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐳 Build Docker Image with Default Args
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner:test . --build-context gh=..

      - name: 🔍 Validate Docker Image Tools
        run: |
          # Check that all required tools are installed and accessible
          docker run --rm hiero/solo-runner:test kind version
          docker run --rm hiero/solo-runner:test helm version --short
          docker run --rm hiero/solo-runner:test kubectl version --client=true --output=yaml
          docker run --rm hiero/solo-runner:test solo version
          docker run --rm hiero/solo-runner:test python3 --version
          docker run --rm hiero/solo-runner:test jq --version

      - name: 🐳 Build Docker Image with Custom Args
        working-directory: ./local
        run: |
          docker build \
            --build-arg KIND_VERSION=0.29.0 \
            --build-arg HELM_VERSION=3.17.4 \
            --build-arg KUBECTL_VERSION=1.33.3 \
            --build-arg DOCKER_VERSION=28.3.2 \
            -t hiero/solo-runner:custom . \
            --build-context gh=..

      - name: 🔍 Validate Custom Build Tools
        run: |
          docker run --rm hiero/solo-runner:custom kind version
          docker run --rm hiero/solo-runner:custom helm version --short
          docker run --rm hiero/solo-runner:custom kubectl version --client=true --output=yaml

  validate-docker-compose:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐳 Test Docker Compose Setup
        working-directory: ./local
        run: |
          # Build the image first
          docker build -t hiero/solo-runner . --build-context gh=..
          
          # Test compose file validation
          docker compose config
          
          # Verify the compose service can start (just build, don't run full setup)
          docker compose build

  validate-plain-docker-setup:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐳 Build Docker Image
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner . --build-context gh=..

      - name: 📋 Copy Required Files to Container
        working-directory: ./local
        run: |
          # Create a test container to copy files and validate setup
          docker create --name test-container hiero/solo-runner sleep 3600
          
          # Copy additional required files
          docker cp ./create-ecdsa-account.sh test-container:/create-ecdsa-account.sh
          docker cp ./all-in-setup.sh test-container:/all-in-setup.sh
          docker cp ../extractAccountAsJson.py test-container:/extractAccountAsJson.py
          
          # Make scripts executable
          docker exec test-container chmod +x /create-ecdsa-account.sh
          docker exec test-container chmod +x /all-in-setup.sh
          
          # Cleanup
          docker rm test-container

      - name: 🔍 Validate Script Syntax
        working-directory: ./local
        run: |
          # Check shell script syntax
          docker run --rm -v "$(pwd)/setup-solo-test-net.sh:/script.sh" hiero/solo-runner sh -n /script.sh
          docker run --rm -v "$(pwd)/create-ecdsa-account.sh:/script.sh" hiero/solo-runner sh -n /script.sh
          docker run --rm -v "$(pwd)/all-in-setup.sh:/script.sh" hiero/solo-runner sh -n /script.sh

      - name: 🐍 Validate Python Script
        working-directory: ./local
        run: |
          # Check Python script syntax
          docker run --rm -v "$(pwd)/../extractAccountAsJson.py:/script.py" hiero/solo-runner python3 -m py_compile /script.py

  validate-kind-config:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🔧 Install kind
        run: |
          # Install kind for validation
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: ✅ Validate kind Configuration
        working-directory: ./local
        run: |
          # Validate kind config syntax
          kind create cluster --dry-run --config=./kind-config.yaml --name validation-test

  validate-haproxy-config:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: ✅ Validate HAProxy Service Patch
        working-directory: ./local
        run: |
          # Validate YAML syntax
          python3 -c "import yaml; yaml.safe_load(open('haproxy-svc-patch.yaml', 'r'))"
          echo "✅ HAProxy service patch YAML is valid"

  validate-environment-variables:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐳 Build Docker Image
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner . --build-context gh=..

      - name: 🔍 Test Environment Variables Setup
        run: |
          # Test that environment variables can be set and used
          docker run --rm \
            -e SOLO_CLUSTER_NAME=test-cluster \
            -e SOLO_NAMESPACE=test-solo \
            -e SOLO_DEPLOYMENT=test-deployment \
            -e HIERO_VERSION=v0.63.7 \
            hiero/solo-runner \
            sh -c 'echo "Cluster: $SOLO_CLUSTER_NAME, Namespace: $SOLO_NAMESPACE, Deployment: $SOLO_DEPLOYMENT, Version: $HIERO_VERSION"'

  validate-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: 🚀 Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 📖 Validate README Commands
        working-directory: ./local
        run: |
          # Check that all mentioned commands in README exist in Dockerfile
          echo "Checking if documented build command is valid..."
          
          # Test the exact command from README
          docker build -t hiero/solo-runner . --build-context gh=..
          
          echo "✅ Build command from documentation works"

      - name: 🔍 Verify Documented Build Args
        working-directory: ./local
        run: |
          # Test build with all documented build args
          docker build \
            --build-arg DOCKER_VERSION=28.3.2 \
            --build-arg HELM_VERSION=3.17.4 \
            --build-arg HIERO_VERSION=v0.63.7 \
            --build-arg KIND_VERSION=0.29.0 \
            --build-arg KUBECTL_VERSION=1.33.3 \
            -t hiero/solo-runner:doc-test . \
            --build-context gh=..
          
          echo "✅ All documented build args work correctly"
