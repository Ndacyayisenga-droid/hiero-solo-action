# Local Setup Validation
#
# This workflow validates the local Docker-based development setup in the `local/` directory.
# It focuses on build validation and static analysis rather than full execution to avoid
# Docker-in-Docker complexity in CI environments.
#
# What it validates:
# - Docker image builds successfully with default and custom build args
# - All required tools (kind, helm, kubectl, solo, python3, jq) are installed and accessible
# - Docker Compose configuration is valid
# - Shell scripts have valid syntax
# - Python scripts compile successfully
# - YAML configuration files are valid
# - Environment variables can be used in containers
# - Documentation examples work as described
#
# This complements validation.yml which tests the GitHub Action itself.

name: Local Setup Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - 'local/**'
      - '.github/workflows/local-setup-validation.yml'
  push:
    branches:
      - main
    paths:
      - 'local/**'
      - '.github/workflows/local-setup-validation.yml'

jobs:
  validate-docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üê≥ Build Docker Image with Default Args
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner:test . --build-context gh=..

      - name: üîç Validate Docker Image Tools
        run: |
          # Check that all required tools are installed and accessible
          echo "=== Checking kind ==="
          docker run --rm hiero/solo-runner:test kind version
          
          echo "=== Checking helm ==="
          docker run --rm hiero/solo-runner:test helm version --short
          
          echo "=== Checking kubectl ==="
          docker run --rm hiero/solo-runner:test kubectl version --client=true --output=yaml
          
          echo "=== Checking solo ==="
          docker run --rm hiero/solo-runner:test solo version
          
          echo "=== Checking python3 ==="
          docker run --rm hiero/solo-runner:test python3 --version
          
          echo "=== Checking jq ==="
          docker run --rm hiero/solo-runner:test jq --version
          
          echo "‚úÖ All tools are accessible"

      - name: üê≥ Build Docker Image with Custom Args
        working-directory: ./local
        run: |
          docker build \
            --build-arg KIND_VERSION=0.29.0 \
            --build-arg HELM_VERSION=3.17.4 \
            --build-arg KUBECTL_VERSION=1.33.3 \
            --build-arg DOCKER_VERSION=28.3.2 \
            -t hiero/solo-runner:custom . \
            --build-context gh=..

      - name: üîç Validate Custom Build Tools
        run: |
          echo "=== Checking kind ==="
          docker run --rm hiero/solo-runner:custom kind version
          
          echo "=== Checking helm ==="
          docker run --rm hiero/solo-runner:custom helm version --short
          
          echo "=== Checking kubectl ==="
          docker run --rm hiero/solo-runner:custom kubectl version --client=true --output=yaml
          
          echo "‚úÖ Custom build tools are accessible"

  validate-docker-compose:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üê≥ Test Docker Compose Setup
        working-directory: ./local
        run: |
          # Build the image first
          docker build -t hiero/solo-runner . --build-context gh=..
          
          # Test compose file validation
          docker compose config
          
          # Verify the compose service can start (just build, don't run full setup)
          docker compose build

  validate-scripts-and-files:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üê≥ Build Docker Image
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner . --build-context gh=..

      - name: üìã Validate Required Files Are Accessible
        working-directory: ./local
        run: |
          # Check that all setup scripts are included in the Docker image
          echo "=== Checking setup-solo-test-net.sh is accessible ==="
          docker run --rm hiero/solo-runner ls -la /setup-solo-test-net.sh
          
          echo "=== Checking kind-config.yaml is accessible ==="
          docker run --rm hiero/solo-runner ls -la /kind-config.yaml
          
          echo "=== Checking haproxy-svc-patch.yaml is accessible ==="
          docker run --rm hiero/solo-runner ls -la /haproxy-svc-patch.yaml

      - name: üîç Validate Script Syntax
        working-directory: ./local
        run: |
          # Check shell script syntax without executing
          echo "=== Validating setup-solo-test-net.sh syntax ==="
          docker run --rm -v "$(pwd)/setup-solo-test-net.sh:/script.sh" hiero/solo-runner sh -n /script.sh
          
          echo "=== Validating create-ecdsa-account.sh syntax ==="
          docker run --rm -v "$(pwd)/create-ecdsa-account.sh:/script.sh" hiero/solo-runner sh -n /script.sh
          
          echo "=== Validating all-in-setup.sh syntax ==="
          docker run --rm -v "$(pwd)/all-in-setup.sh:/script.sh" hiero/solo-runner sh -n /script.sh
          
          echo "‚úÖ All scripts have valid syntax"

      - name: üêç Validate Python Script
        working-directory: ./local
        run: |
          # Check Python script syntax
          echo "=== Validating extractAccountAsJson.py syntax ==="
          docker run --rm -v "$(pwd)/../extractAccountAsJson.py:/script.py" hiero/solo-runner python3 -m py_compile /script.py
          echo "‚úÖ Python script syntax is valid"

      - name: üîß Validate Environment Variables Usage
        working-directory: ./local
        run: |
          # Check that scripts reference expected environment variables
          echo "=== Checking environment variable usage in scripts ==="
          
          if grep -q "SOLO_CLUSTER_NAME" setup-solo-test-net.sh; then
            echo "‚úÖ setup-solo-test-net.sh uses SOLO_CLUSTER_NAME"
          else
            echo "‚ùå setup-solo-test-net.sh missing SOLO_CLUSTER_NAME usage"
            exit 1
          fi
          
          if grep -q "SOLO_NAMESPACE" setup-solo-test-net.sh; then
            echo "‚úÖ setup-solo-test-net.sh uses SOLO_NAMESPACE"
          else
            echo "‚ùå setup-solo-test-net.sh missing SOLO_NAMESPACE usage"
            exit 1
          fi
          
          if grep -q "SOLO_DEPLOYMENT" setup-solo-test-net.sh; then
            echo "‚úÖ setup-solo-test-net.sh uses SOLO_DEPLOYMENT"
          else
            echo "‚ùå setup-solo-test-net.sh missing SOLO_DEPLOYMENT usage"
            exit 1
          fi

  validate-kind-config:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üîß Install kind
        run: |
          # Install kind for validation
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: ‚úÖ Validate kind Configuration
        working-directory: ./local
        run: |
          # Validate kind config syntax
          kind create cluster --dry-run --config=./kind-config.yaml --name validation-test

  validate-haproxy-config:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: ‚úÖ Validate HAProxy Service Patch
        working-directory: ./local
        run: |
          # Validate YAML syntax (pip install pyyaml first if needed)
          python3 -c "
          import sys
          try:
              import yaml
          except ImportError:
              print('Installing PyYAML...')
              import subprocess
              subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'PyYAML'])
              import yaml
          
          with open('haproxy-svc-patch.yaml', 'r') as f:
              yaml.safe_load(f)
          print('‚úÖ HAProxy service patch YAML is valid')
          "

  validate-runtime-environment:
    runs-on: ubuntu-latest
    needs: validate-docker-build
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üê≥ Build Docker Image
        working-directory: ./local
        run: |
          docker build -t hiero/solo-runner . --build-context gh=..

      - name: üîç Test Environment Variables Setup
        run: |
          # Test that environment variables can be set and accessed
          echo "=== Testing environment variable accessibility ==="
          docker run --rm \
            -e SOLO_CLUSTER_NAME=test-cluster \
            -e SOLO_NAMESPACE=test-solo \
            -e SOLO_DEPLOYMENT=test-deployment \
            -e HIERO_VERSION=v0.63.7 \
            hiero/solo-runner \
            sh -c 'echo "Cluster: $SOLO_CLUSTER_NAME, Namespace: $SOLO_NAMESPACE, Deployment: $SOLO_DEPLOYMENT, Version: $HIERO_VERSION"'
          
          echo "‚úÖ Environment variables are accessible in container"

      - name: üè† Test Home Directory Creation
        run: |
          # Test that the container can create necessary directories
          echo "=== Testing directory creation capabilities ==="
          docker run --rm hiero/solo-runner sh -c 'mkdir -p ~/.kube && echo "‚úÖ Can create .kube directory"'
          docker run --rm hiero/solo-runner sh -c 'mkdir -p ~/.solo && echo "‚úÖ Can create .solo directory"'
          
          echo "‚úÖ Container can create required directories"

      - name: üîß Test Basic Tool Functionality
        run: |
          # Test basic functionality of installed tools (without requiring Docker daemon)
          echo "=== Testing solo init (dry run) ==="
          docker run --rm hiero/solo-runner solo --help | head -5
          
          echo "=== Testing kind (version only) ==="
          docker run --rm hiero/solo-runner kind --help | head -5
          
          echo "=== Testing helm (version only) ==="
          docker run --rm hiero/solo-runner helm --help | head -5
          
          echo "‚úÖ Basic tool functionality verified"

  validate-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: üöÄ Checkout Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: üìñ Validate README Commands
        working-directory: ./local
        run: |
          # Check that all mentioned commands in README exist in Dockerfile
          echo "Checking if documented build command is valid..."
          
          # Test the exact command from README
          docker build -t hiero/solo-runner . --build-context gh=..
          
          echo "‚úÖ Build command from documentation works"

      - name: üîç Verify Documented Build Args
        working-directory: ./local
        run: |
          # Test build with all documented build args
          docker build \
            --build-arg DOCKER_VERSION=28.3.2 \
            --build-arg HELM_VERSION=3.17.4 \
            --build-arg HIERO_VERSION=v0.63.7 \
            --build-arg KIND_VERSION=0.29.0 \
            --build-arg KUBECTL_VERSION=1.33.3 \
            -t hiero/solo-runner:doc-test . \
            --build-context gh=..
          
          echo "‚úÖ All documented build args work correctly"
